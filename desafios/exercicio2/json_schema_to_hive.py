import json

_ATHENA_CLIENT = None


def create_hive_table_with_athena(query):
    '''
    Função necessária para criação da tabela HIVE na AWS
    :param query: Script SQL de Create Table (str)
    :return: None
    '''
    
    print(f"Query: {query}")
    _ATHENA_CLIENT.start_query_execution(
        QueryString=query,
        ResultConfiguration={
            'OutputLocation': f's3://iti-query-results/'
        }
    )


def handler():
    '''
    #  Função principal
    Aqui você deve começar a implementar o seu código
    Você pode criar funções/classes à vontade
    Utilize a função create_hive_table_with_athena para te auxiliar
        na criação da tabela HIVE, não é necessário alterá-la
    '''
    file = open("schema.json")
    schema = json.load(file)
    constructor = SchemaToAthena(schema)
    create_hive_table_with_athena(constructor.create_table_query())


class SchemaToAthena:
    def __init__(self, schema: dict,
                 row_format="ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'",
                 location="s3://iti-athena/"):
        self.schema = schema
        self.data_types = {
            "object": "struct",
            "integer": "int"
        }
        self.row_format = row_format
        self.location = location

    def _get_table_name(self) -> str:
        """Create table name by schema title. Changing this title to lower case and replacing spaces with '_'. If schema
        doesnt have and title, 'default_schema' will be the table name generated
            :return: String with generated table name
        """
        title = self.schema.get("title", "default schema")
        table_name = title.lower().replace(" ", "_")
        return table_name

    def _get_sub_struct(self, struct: dict) -> str:
        """ Create string with an struct field. It will 'recall' _get_struc_properties to get all fields that are in
        current struct field, replace the space between col name and col type for an ':' and join all fields with an ','
        Finally, a string will be returned.
            :return: String with struct column
        """
        struct_cols = self._get_struct_properties(struct)
        struct_cols = [col.replace(" ", ":") for col in struct_cols]
        struct_cols = ",".join(struct_cols)
        return struct_cols

    def _get_list(self, struct: dict) -> str:
        """ Create string with an array field. It will call _get_sub_struc if items of array are objects, if it isnt,
        it will return only data type of item.
        Finally, a string will be returned with type of items from array.
            :return: String with array data type
        """
        if struct.get('type') == "object":
            list_data_type = f"struct<{self._get_sub_struct(struct.get('properties', {}))}>"
        else:
            list_data_type = self.data_types.get(struct.get("type", "string"), struct.get("type"))
        
        return list_data_type

    def _get_struct_properties(self, properties: dict) -> list:
        """ Create list with columns that will be used in Athena table. Iterates over properties items, and generate
        strings representing each property and it's type, appending this string to an list, that will be returned in the
        end of iteration.
            :param properties: Dict with all properties that will be processed to form columns string
            :return: list of columns of table
        """
        cols = []
        for key, value in properties.items():
            if value.get("type") == "object":
                cols.append(f"'{key}' {self.data_types.get(value.get('type', 'string'), value.get('type'))}"
                            f"<{self._get_sub_struct(value.get('properties',{}))}>")
            elif value.get("type") == "array":
                cols.append(f"'{key}' {self.data_types.get(value.get('type', 'string'), value.get('type'))}"
                            f"<{self._get_list(value.get('items'))}>")
            else:
                cols.append(f"'{key}' {self.data_types.get(value.get('type', 'string'), value.get('type'))}")
        return cols

    def _table_cols(self, properties: dict) -> str:
        """ Join list of columns generated by _get_struct_properties with an ',\n' and return it as an string
            :param properties: Dict with all properties that will be processed to form columns string
            :return: string with columns of table
        """
        cols = self._get_struct_properties(properties)
        return ",\n".join(cols)

    def create_table_query(self) -> str:
        """ Create string that will be used to create the Athena table based on an schema. This table query contains
        the table name, columns, row format and s3 location.
            :return: string with query that will create Athena table
        """
        table_name = self._get_table_name()
        cols = self._table_cols(self.schema.get("properties", {}))
        table_query = f"CREATE EXTERNAL TABLE IF NOT EXISTS {table_name}({cols})" \
                      f" ROW FORMAT '{self.row_format}' LOCATION '{self.location}'"
        return table_query
